"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@chainsafe";
exports.ids = ["vendor-chunks/@chainsafe"];
exports.modules = {

/***/ "(ssr)/./node_modules/@chainsafe/is-ip/lib/is-ip.node.js":
/*!*********************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/is-ip.node.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipVersion: () => (/* reexport safe */ node_net__WEBPACK_IMPORTED_MODULE_0__.isIP),\n/* harmony export */   isIP: () => (/* binding */ isIP),\n/* harmony export */   isIPv4: () => (/* reexport safe */ node_net__WEBPACK_IMPORTED_MODULE_0__.isIPv4),\n/* harmony export */   isIPv6: () => (/* reexport safe */ node_net__WEBPACK_IMPORTED_MODULE_0__.isIPv6)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n\n\n/** Check if `input` is IPv4 or IPv6. */\nfunction isIP(input) {\n    return Boolean((0,node_net__WEBPACK_IMPORTED_MODULE_0__.isIP)(input));\n}\n//# sourceMappingURL=is-ip.node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9pcy1pcC9saWIvaXMtaXAubm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2RDtBQUN4QjtBQUNyQztBQUNPO0FBQ1AsbUJBQW1CLDhDQUFTO0FBQzVCO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc3VtYW5fczJ2aW1ibVxcT25lRHJpdmVcXERlc2t0b3BcXE5GVC1OZXh1c1xcbmV3X2hhcmRoYXRcXG5vZGVfbW9kdWxlc1xcQGNoYWluc2FmZVxcaXMtaXBcXGxpYlxcaXMtaXAubm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0lQdjQsIGlzSVB2NiwgaXNJUCBhcyBpcFZlcnNpb24gfSBmcm9tIFwibm9kZTpuZXRcIjtcbmV4cG9ydCB7IGlzSVB2NCwgaXNJUHY2LCBpcFZlcnNpb24gfTtcbi8qKiBDaGVjayBpZiBgaW5wdXRgIGlzIElQdjQgb3IgSVB2Ni4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lQKGlucHV0KSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oaXBWZXJzaW9uKGlucHV0KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy1pcC5ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/is-ip/lib/is-ip.node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js":
/*!****************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/parse.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseIP: () => (/* binding */ parseIP),\n/* harmony export */   parseIPv4: () => (/* binding */ parseIPv4),\n/* harmony export */   parseIPv4Mapped: () => (/* binding */ parseIPv4Mapped),\n/* harmony export */   parseIPv6: () => (/* binding */ parseIPv6)\n/* harmony export */ });\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parser.js\");\n\n// See https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address\nconst MAX_IPV6_LENGTH = 45;\nconst MAX_IPV4_LENGTH = 15;\nconst parser = new _parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser();\n/** Parse `input` into IPv4 bytes. */\nfunction parseIPv4(input) {\n    if (input.length > MAX_IPV4_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPv4Addr());\n}\n/** Parse IPv4 `input` into IPv6 with IPv4-mapped bytes, eg ::ffff:1.2.3.4 */\nfunction parseIPv4Mapped(input) {\n    if (input.length > MAX_IPV4_LENGTH) {\n        return undefined;\n    }\n    const ipv4 = parser.new(input).parseWith(() => parser.readIPv4Addr());\n    if (ipv4 === undefined) {\n        return undefined;\n    }\n    return Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, ipv4[0], ipv4[1], ipv4[2], ipv4[3]]);\n}\n/** Parse `input` into IPv6 bytes. */\nfunction parseIPv6(input) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPv6Addr());\n}\n/** Parse `input` into IPv4 or IPv6 bytes. */\nfunction parseIP(input, mapIPv4ToIPv6 = false) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    const addr = parser.new(input).parseWith(() => parser.readIPAddr());\n    if (!addr) {\n        return undefined;\n    }\n    if (mapIPv4ToIPv6 && addr.length === 4) {\n        return Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, addr[0], addr[1], addr[2], addr[3]]);\n    }\n    return addr;\n}\n//# sourceMappingURL=parse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9pcy1pcC9saWIvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDhDQUFNO0FBQ3pCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzdW1hbl9zMnZpbWJtXFxPbmVEcml2ZVxcRGVza3RvcFxcTkZULU5leHVzXFxuZXdfaGFyZGhhdFxcbm9kZV9tb2R1bGVzXFxAY2hhaW5zYWZlXFxpcy1pcFxcbGliXFxwYXJzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi9wYXJzZXIuanNcIjtcbi8vIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjYxMzIvbWF4aW11bS1sZW5ndGgtb2YtdGhlLXRleHR1YWwtcmVwcmVzZW50YXRpb24tb2YtYW4taXB2Ni1hZGRyZXNzXG5jb25zdCBNQVhfSVBWNl9MRU5HVEggPSA0NTtcbmNvbnN0IE1BWF9JUFY0X0xFTkdUSCA9IDE1O1xuY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcigpO1xuLyoqIFBhcnNlIGBpbnB1dGAgaW50byBJUHY0IGJ5dGVzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVB2NChpbnB1dCkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPiBNQVhfSVBWNF9MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlci5uZXcoaW5wdXQpLnBhcnNlV2l0aCgoKSA9PiBwYXJzZXIucmVhZElQdjRBZGRyKCkpO1xufVxuLyoqIFBhcnNlIElQdjQgYGlucHV0YCBpbnRvIElQdjYgd2l0aCBJUHY0LW1hcHBlZCBieXRlcywgZWcgOjpmZmZmOjEuMi4zLjQgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUlQdjRNYXBwZWQoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID4gTUFYX0lQVjRfTEVOR1RIKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGlwdjQgPSBwYXJzZXIubmV3KGlucHV0KS5wYXJzZVdpdGgoKCkgPT4gcGFyc2VyLnJlYWRJUHY0QWRkcigpKTtcbiAgICBpZiAoaXB2NCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDB4ZmYsIDB4ZmYsIGlwdjRbMF0sIGlwdjRbMV0sIGlwdjRbMl0sIGlwdjRbM11dKTtcbn1cbi8qKiBQYXJzZSBgaW5wdXRgIGludG8gSVB2NiBieXRlcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUlQdjYoaW5wdXQpIHtcbiAgICAvLyBzdHJpcCB6b25lIGluZGV4IGlmIGl0IGlzIHByZXNlbnRcbiAgICBpZiAoaW5wdXQuaW5jbHVkZXMoXCIlXCIpKSB7XG4gICAgICAgIGlucHV0ID0gaW5wdXQuc3BsaXQoXCIlXCIpWzBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXQubGVuZ3RoID4gTUFYX0lQVjZfTEVOR1RIKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZXIubmV3KGlucHV0KS5wYXJzZVdpdGgoKCkgPT4gcGFyc2VyLnJlYWRJUHY2QWRkcigpKTtcbn1cbi8qKiBQYXJzZSBgaW5wdXRgIGludG8gSVB2NCBvciBJUHY2IGJ5dGVzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVAoaW5wdXQsIG1hcElQdjRUb0lQdjYgPSBmYWxzZSkge1xuICAgIC8vIHN0cmlwIHpvbmUgaW5kZXggaWYgaXQgaXMgcHJlc2VudFxuICAgIGlmIChpbnB1dC5pbmNsdWRlcyhcIiVcIikpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zcGxpdChcIiVcIilbMF07XG4gICAgfVxuICAgIGlmIChpbnB1dC5sZW5ndGggPiBNQVhfSVBWNl9MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgYWRkciA9IHBhcnNlci5uZXcoaW5wdXQpLnBhcnNlV2l0aCgoKSA9PiBwYXJzZXIucmVhZElQQWRkcigpKTtcbiAgICBpZiAoIWFkZHIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKG1hcElQdjRUb0lQdjYgJiYgYWRkci5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMHhmZiwgMHhmZiwgYWRkclswXSwgYWRkclsxXSwgYWRkclsyXSwgYWRkclszXV0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/is-ip/lib/parser.js":
/*!*****************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/parser.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nclass Parser {\n    index = 0;\n    input = \"\";\n    new(input) {\n        this.index = 0;\n        this.input = input;\n        return this;\n    }\n    /** Run a parser, and restore the pre-parse state if it fails. */\n    readAtomically(fn) {\n        const index = this.index;\n        const result = fn();\n        if (result === undefined) {\n            this.index = index;\n        }\n        return result;\n    }\n    /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */\n    parseWith(fn) {\n        const result = fn();\n        if (this.index !== this.input.length) {\n            return undefined;\n        }\n        return result;\n    }\n    /** Peek the next character from the input */\n    peekChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index];\n    }\n    /** Read the next character from the input */\n    readChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index++];\n    }\n    /** Read the next character from the input if it matches the target. */\n    readGivenChar(target) {\n        return this.readAtomically(() => {\n            const char = this.readChar();\n            if (char !== target) {\n                return undefined;\n            }\n            return char;\n        });\n    }\n    /**\n     * Helper for reading separators in an indexed loop. Reads the separator\n     * character iff index > 0, then runs the parser. When used in a loop,\n     * the separator character will only be read on index > 0 (see\n     * readIPv4Addr for an example)\n     */\n    readSeparator(sep, index, inner) {\n        return this.readAtomically(() => {\n            if (index > 0) {\n                if (this.readGivenChar(sep) === undefined) {\n                    return undefined;\n                }\n            }\n            return inner();\n        });\n    }\n    /**\n     * Read a number off the front of the input in the given radix, stopping\n     * at the first non-digit character or eof. Fails if the number has more\n     * digits than max_digits or if there is no number.\n     */\n    readNumber(radix, maxDigits, allowZeroPrefix, maxBytes) {\n        return this.readAtomically(() => {\n            let result = 0;\n            let digitCount = 0;\n            const leadingChar = this.peekChar();\n            if (leadingChar === undefined) {\n                return undefined;\n            }\n            const hasLeadingZero = leadingChar === \"0\";\n            const maxValue = 2 ** (8 * maxBytes) - 1;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const digit = this.readAtomically(() => {\n                    const char = this.readChar();\n                    if (char === undefined) {\n                        return undefined;\n                    }\n                    const num = Number.parseInt(char, radix);\n                    if (Number.isNaN(num)) {\n                        return undefined;\n                    }\n                    return num;\n                });\n                if (digit === undefined) {\n                    break;\n                }\n                result *= radix;\n                result += digit;\n                if (result > maxValue) {\n                    return undefined;\n                }\n                digitCount += 1;\n                if (maxDigits !== undefined) {\n                    if (digitCount > maxDigits) {\n                        return undefined;\n                    }\n                }\n            }\n            if (digitCount === 0) {\n                return undefined;\n            }\n            else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n                return undefined;\n            }\n            else {\n                return result;\n            }\n        });\n    }\n    /** Read an IPv4 address. */\n    readIPv4Addr() {\n        return this.readAtomically(() => {\n            const out = new Uint8Array(4);\n            for (let i = 0; i < out.length; i++) {\n                const ix = this.readSeparator(\".\", i, () => this.readNumber(10, 3, false, 1));\n                if (ix === undefined) {\n                    return undefined;\n                }\n                out[i] = ix;\n            }\n            return out;\n        });\n    }\n    /** Read an IPv6 Address. */\n    readIPv6Addr() {\n        /**\n         * Read a chunk of an IPv6 address into `groups`. Returns the number\n         * of groups read, along with a bool indicating if an embedded\n         * trailing IPv4 address was read. Specifically, read a series of\n         * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n         * trailing embedded IPv4 address.\n         */\n        const readGroups = (groups) => {\n            for (let i = 0; i < groups.length / 2; i++) {\n                const ix = i * 2;\n                // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n                if (i < groups.length - 3) {\n                    const ipv4 = this.readSeparator(\":\", i, () => this.readIPv4Addr());\n                    if (ipv4 !== undefined) {\n                        groups[ix] = ipv4[0];\n                        groups[ix + 1] = ipv4[1];\n                        groups[ix + 2] = ipv4[2];\n                        groups[ix + 3] = ipv4[3];\n                        return [ix + 4, true];\n                    }\n                }\n                const group = this.readSeparator(\":\", i, () => this.readNumber(16, 4, true, 2));\n                if (group === undefined) {\n                    return [ix, false];\n                }\n                groups[ix] = group >> 8;\n                groups[ix + 1] = group & 255;\n            }\n            return [groups.length, false];\n        };\n        return this.readAtomically(() => {\n            // Read the front part of the address; either the whole thing, or up to the first ::\n            const head = new Uint8Array(16);\n            const [headSize, headIp4] = readGroups(head);\n            if (headSize === 16) {\n                return head;\n            }\n            // IPv4 part is not allowed before `::`\n            if (headIp4) {\n                return undefined;\n            }\n            // Read `::` if previous code parsed less than 8 groups.\n            // `::` indicates one or more groups of 16 bits of zeros.\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            // Read the back part of the address. The :: must contain at least one\n            // set of zeroes, so our max length is 7.\n            const tail = new Uint8Array(14);\n            const limit = 16 - (headSize + 2);\n            const [tailSize] = readGroups(tail.subarray(0, limit));\n            // Concat the head and tail of the IP address\n            head.set(tail.subarray(0, tailSize), 16 - tailSize);\n            return head;\n        });\n    }\n    /** Read an IP Address, either IPv4 or IPv6. */\n    readIPAddr() {\n        return this.readIPv4Addr() ?? this.readIPv6Addr();\n    }\n}\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/is-ip/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js":
/*!**********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/cidr.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cidrMask: () => (/* binding */ cidrMask),\n/* harmony export */   parseCidr: () => (/* binding */ parseCidr)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n\n\nfunction parseCidr(s) {\n    const [address, maskString] = s.split(\"/\");\n    if (!address || !maskString)\n        throw new Error(\"Failed to parse given CIDR: \" + s);\n    let ipLength = _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv4Len;\n    let ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIPv4)(address);\n    if (ip == null) {\n        ipLength = _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv6Len;\n        ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIPv6)(address);\n        if (ip == null)\n            throw new Error(\"Failed to parse given CIDR: \" + s);\n    }\n    const m = parseInt(maskString, 10);\n    if (Number.isNaN(m) ||\n        String(m).length !== maskString.length ||\n        m < 0 ||\n        m > ipLength * 8) {\n        throw new Error(\"Failed to parse given CIDR: \" + s);\n    }\n    const mask = cidrMask(m, 8 * ipLength);\n    return {\n        network: (0,_ip_js__WEBPACK_IMPORTED_MODULE_1__.maskIp)(ip, mask),\n        mask,\n    };\n}\nfunction cidrMask(ones, bits) {\n    if (bits !== 8 * _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv4Len && bits !== 8 * _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv6Len)\n        throw new Error(\"Invalid CIDR mask\");\n    if (ones < 0 || ones > bits)\n        throw new Error(\"Invalid CIDR mask\");\n    const l = bits / 8;\n    const m = new Uint8Array(l);\n    for (let i = 0; i < l; i++) {\n        if (ones >= 8) {\n            m[i] = 0xff;\n            ones -= 8;\n            continue;\n        }\n        m[i] = 255 - (0xff >> ones);\n        ones = 0;\n    }\n    return m;\n}\n//# sourceMappingURL=cidr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2NpZHIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4RDtBQUNYO0FBQzVDO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDJDQUFPO0FBQzFCLGFBQWEsaUVBQVM7QUFDdEI7QUFDQSxtQkFBbUIsMkNBQU87QUFDMUIsYUFBYSxpRUFBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsOENBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ087QUFDUCxxQkFBcUIsMkNBQU8saUJBQWlCLDJDQUFPO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHN1bWFuX3MydmltYm1cXE9uZURyaXZlXFxEZXNrdG9wXFxORlQtTmV4dXNcXG5ld19oYXJkaGF0XFxub2RlX21vZHVsZXNcXEBjaGFpbnNhZmVcXG5ldG1hc2tcXGRpc3RcXHNyY1xcY2lkci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZUlQdjQsIHBhcnNlSVB2NiB9IGZyb20gXCJAY2hhaW5zYWZlL2lzLWlwL3BhcnNlXCI7XG5pbXBvcnQgeyBJUHY0TGVuLCBJUHY2TGVuLCBtYXNrSXAgfSBmcm9tIFwiLi9pcC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ2lkcihzKSB7XG4gICAgY29uc3QgW2FkZHJlc3MsIG1hc2tTdHJpbmddID0gcy5zcGxpdChcIi9cIik7XG4gICAgaWYgKCFhZGRyZXNzIHx8ICFtYXNrU3RyaW5nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgZ2l2ZW4gQ0lEUjogXCIgKyBzKTtcbiAgICBsZXQgaXBMZW5ndGggPSBJUHY0TGVuO1xuICAgIGxldCBpcCA9IHBhcnNlSVB2NChhZGRyZXNzKTtcbiAgICBpZiAoaXAgPT0gbnVsbCkge1xuICAgICAgICBpcExlbmd0aCA9IElQdjZMZW47XG4gICAgICAgIGlwID0gcGFyc2VJUHY2KGFkZHJlc3MpO1xuICAgICAgICBpZiAoaXAgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBnaXZlbiBDSURSOiBcIiArIHMpO1xuICAgIH1cbiAgICBjb25zdCBtID0gcGFyc2VJbnQobWFza1N0cmluZywgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4obSkgfHxcbiAgICAgICAgU3RyaW5nKG0pLmxlbmd0aCAhPT0gbWFza1N0cmluZy5sZW5ndGggfHxcbiAgICAgICAgbSA8IDAgfHxcbiAgICAgICAgbSA+IGlwTGVuZ3RoICogOCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgZ2l2ZW4gQ0lEUjogXCIgKyBzKTtcbiAgICB9XG4gICAgY29uc3QgbWFzayA9IGNpZHJNYXNrKG0sIDggKiBpcExlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV0d29yazogbWFza0lwKGlwLCBtYXNrKSxcbiAgICAgICAgbWFzayxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNpZHJNYXNrKG9uZXMsIGJpdHMpIHtcbiAgICBpZiAoYml0cyAhPT0gOCAqIElQdjRMZW4gJiYgYml0cyAhPT0gOCAqIElQdjZMZW4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQ0lEUiBtYXNrXCIpO1xuICAgIGlmIChvbmVzIDwgMCB8fCBvbmVzID4gYml0cylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBDSURSIG1hc2tcIik7XG4gICAgY29uc3QgbCA9IGJpdHMgLyA4O1xuICAgIGNvbnN0IG0gPSBuZXcgVWludDhBcnJheShsKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAob25lcyA+PSA4KSB7XG4gICAgICAgICAgICBtW2ldID0gMHhmZjtcbiAgICAgICAgICAgIG9uZXMgLT0gODtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIG1baV0gPSAyNTUgLSAoMHhmZiA+PiBvbmVzKTtcbiAgICAgICAgb25lcyA9IDA7XG4gICAgfVxuICAgIHJldHVybiBtO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2lkci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpNet: () => (/* reexport safe */ _ipnet_js__WEBPACK_IMPORTED_MODULE_0__.IpNet),\n/* harmony export */   cidrContains: () => (/* binding */ cidrContains),\n/* harmony export */   iPv4FromIPv6: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.iPv4FromIPv6),\n/* harmony export */   ipToString: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_1__.ipToString),\n/* harmony export */   isIPv4mappedIPv6: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.isIPv4mappedIPv6),\n/* harmony export */   maskIp: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.maskIp),\n/* harmony export */   parseCidr: () => (/* reexport safe */ _cidr_js__WEBPACK_IMPORTED_MODULE_3__.parseCidr)\n/* harmony export */ });\n/* harmony import */ var _ipnet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ipnet.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ipnet.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n/* harmony import */ var _cidr_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cidr.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js\");\n\n\n\n\n\n/**\n * Checks if cidr block contains ip address\n * @param cidr ipv4 or ipv6 formatted cidr . Example 198.51.100.14/24 or 2001:db8::/48\n * @param ip ipv4 or ipv6 address Example 198.51.100.14 or 2001:db8::\n *\n */\nfunction cidrContains(cidr, ip) {\n    const ipnet = new _ipnet_js__WEBPACK_IMPORTED_MODULE_0__.IpNet(cidr);\n    return ipnet.contains(ip);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ0k7QUFDMEI7QUFDOUI7QUFDRztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHNCQUFzQiw0Q0FBSztBQUMzQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc3VtYW5fczJ2aW1ibVxcT25lRHJpdmVcXERlc2t0b3BcXE5GVC1OZXh1c1xcbmV3X2hhcmRoYXRcXG5vZGVfbW9kdWxlc1xcQGNoYWluc2FmZVxcbmV0bWFza1xcZGlzdFxcc3JjXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJcE5ldCB9IGZyb20gXCIuL2lwbmV0LmpzXCI7XG5leHBvcnQgeyBpcFRvU3RyaW5nIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuZXhwb3J0IHsgbWFza0lwLCBpUHY0RnJvbUlQdjYsIGlzSVB2NG1hcHBlZElQdjYgfSBmcm9tIFwiLi9pcC5qc1wiO1xuZXhwb3J0IHsgSXBOZXQgfSBmcm9tIFwiLi9pcG5ldC5qc1wiO1xuZXhwb3J0IHsgcGFyc2VDaWRyIH0gZnJvbSBcIi4vY2lkci5qc1wiO1xuLyoqXG4gKiBDaGVja3MgaWYgY2lkciBibG9jayBjb250YWlucyBpcCBhZGRyZXNzXG4gKiBAcGFyYW0gY2lkciBpcHY0IG9yIGlwdjYgZm9ybWF0dGVkIGNpZHIgLiBFeGFtcGxlIDE5OC41MS4xMDAuMTQvMjQgb3IgMjAwMTpkYjg6Oi80OFxuICogQHBhcmFtIGlwIGlwdjQgb3IgaXB2NiBhZGRyZXNzIEV4YW1wbGUgMTk4LjUxLjEwMC4xNCBvciAyMDAxOmRiODo6XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2lkckNvbnRhaW5zKGNpZHIsIGlwKSB7XG4gICAgY29uc3QgaXBuZXQgPSBuZXcgSXBOZXQoY2lkcik7XG4gICAgcmV0dXJuIGlwbmV0LmNvbnRhaW5zKGlwKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js":
/*!********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/ip.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IPv4Len: () => (/* binding */ IPv4Len),\n/* harmony export */   IPv6Len: () => (/* binding */ IPv6Len),\n/* harmony export */   containsIp: () => (/* binding */ containsIp),\n/* harmony export */   iPv4FromIPv6: () => (/* binding */ iPv4FromIPv6),\n/* harmony export */   ipv4Prefix: () => (/* binding */ ipv4Prefix),\n/* harmony export */   isIPv4mappedIPv6: () => (/* binding */ isIPv4mappedIPv6),\n/* harmony export */   maskIp: () => (/* binding */ maskIp),\n/* harmony export */   maxIPv6Octet: () => (/* binding */ maxIPv6Octet)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\");\n\n\nconst IPv4Len = 4;\nconst IPv6Len = 16;\nconst maxIPv6Octet = parseInt(\"0xFFFF\", 16);\nconst ipv4Prefix = new Uint8Array([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,\n]);\nfunction maskIp(ip, mask) {\n    if (mask.length === IPv6Len && ip.length === IPv4Len && (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.allFF)(mask, 0, 11)) {\n        mask = mask.slice(12);\n    }\n    if (mask.length === IPv4Len &&\n        ip.length === IPv6Len &&\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(ip, ipv4Prefix, 0, 11)) {\n        ip = ip.slice(12);\n    }\n    const n = ip.length;\n    if (n != mask.length) {\n        throw new Error(\"Failed to mask ip\");\n    }\n    const out = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n        out[i] = ip[i] & mask[i];\n    }\n    return out;\n}\nfunction containsIp(net, ip) {\n    if (typeof ip === \"string\") {\n        ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(ip);\n    }\n    if (ip == null)\n        throw new Error(\"Invalid ip\");\n    if (ip.length !== net.network.length) {\n        return false;\n    }\n    for (let i = 0; i < ip.length; i++) {\n        if ((net.network[i] & net.mask[i]) !== (ip[i] & net.mask[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction iPv4FromIPv6(ip) {\n    if (!isIPv4mappedIPv6(ip)) {\n        throw new Error(\"Must have 0xffff prefix\");\n    }\n    return ip.slice(12);\n}\nfunction isIPv4mappedIPv6(ip) {\n    return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(ip, ipv4Prefix, 0, 11);\n}\n//# sourceMappingURL=ip.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2lwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDSjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNQO0FBQ0E7QUFDTztBQUNQLDREQUE0RCwrQ0FBSztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsbURBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxhQUFhLCtEQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixlQUFlO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxtREFBUztBQUNwQjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHN1bWFuX3MydmltYm1cXE9uZURyaXZlXFxEZXNrdG9wXFxORlQtTmV4dXNcXG5ld19oYXJkaGF0XFxub2RlX21vZHVsZXNcXEBjaGFpbnNhZmVcXG5ldG1hc2tcXGRpc3RcXHNyY1xcaXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VJUCB9IGZyb20gXCJAY2hhaW5zYWZlL2lzLWlwL3BhcnNlXCI7XG5pbXBvcnQgeyBhbGxGRiwgZGVlcEVxdWFsIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuZXhwb3J0IGNvbnN0IElQdjRMZW4gPSA0O1xuZXhwb3J0IGNvbnN0IElQdjZMZW4gPSAxNjtcbmV4cG9ydCBjb25zdCBtYXhJUHY2T2N0ZXQgPSBwYXJzZUludChcIjB4RkZGRlwiLCAxNik7XG5leHBvcnQgY29uc3QgaXB2NFByZWZpeCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAyNTUsIDI1NSxcbl0pO1xuZXhwb3J0IGZ1bmN0aW9uIG1hc2tJcChpcCwgbWFzaykge1xuICAgIGlmIChtYXNrLmxlbmd0aCA9PT0gSVB2NkxlbiAmJiBpcC5sZW5ndGggPT09IElQdjRMZW4gJiYgYWxsRkYobWFzaywgMCwgMTEpKSB7XG4gICAgICAgIG1hc2sgPSBtYXNrLnNsaWNlKDEyKTtcbiAgICB9XG4gICAgaWYgKG1hc2subGVuZ3RoID09PSBJUHY0TGVuICYmXG4gICAgICAgIGlwLmxlbmd0aCA9PT0gSVB2NkxlbiAmJlxuICAgICAgICBkZWVwRXF1YWwoaXAsIGlwdjRQcmVmaXgsIDAsIDExKSkge1xuICAgICAgICBpcCA9IGlwLnNsaWNlKDEyKTtcbiAgICB9XG4gICAgY29uc3QgbiA9IGlwLmxlbmd0aDtcbiAgICBpZiAobiAhPSBtYXNrLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gbWFzayBpcFwiKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gaXBbaV0gJiBtYXNrW2ldO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zSXAobmV0LCBpcCkge1xuICAgIGlmICh0eXBlb2YgaXAgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaXAgPSBwYXJzZUlQKGlwKTtcbiAgICB9XG4gICAgaWYgKGlwID09IG51bGwpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaXBcIik7XG4gICAgaWYgKGlwLmxlbmd0aCAhPT0gbmV0Lm5ldHdvcmsubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoKG5ldC5uZXR3b3JrW2ldICYgbmV0Lm1hc2tbaV0pICE9PSAoaXBbaV0gJiBuZXQubWFza1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpUHY0RnJvbUlQdjYoaXApIHtcbiAgICBpZiAoIWlzSVB2NG1hcHBlZElQdjYoaXApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgaGF2ZSAweGZmZmYgcHJlZml4XCIpO1xuICAgIH1cbiAgICByZXR1cm4gaXAuc2xpY2UoMTIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSVB2NG1hcHBlZElQdjYoaXApIHtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGlwLCBpcHY0UHJlZml4LCAwLCAxMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/ipnet.js":
/*!***********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/ipnet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpNet: () => (/* binding */ IpNet)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _cidr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cidr.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\");\n\n\n\n\nclass IpNet {\n    /**\n     *\n     * @param ipOrCidr either network ip or full cidr address\n     * @param mask in case ipOrCidr is network this can be either mask in decimal format or as ip address\n     */\n    constructor(ipOrCidr, mask) {\n        if (mask == null) {\n            ({ network: this.network, mask: this.mask } = (0,_cidr_js__WEBPACK_IMPORTED_MODULE_1__.parseCidr)(ipOrCidr));\n        }\n        else {\n            const ipResult = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(ipOrCidr);\n            if (ipResult == null) {\n                throw new Error(\"Failed to parse network\");\n            }\n            mask = String(mask);\n            const m = parseInt(mask, 10);\n            if (Number.isNaN(m) ||\n                String(m).length !== mask.length ||\n                m < 0 ||\n                m > ipResult.length * 8) {\n                const maskResult = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(mask);\n                if (maskResult == null) {\n                    throw new Error(\"Failed to parse mask\");\n                }\n                this.mask = maskResult;\n            }\n            else {\n                this.mask = (0,_cidr_js__WEBPACK_IMPORTED_MODULE_1__.cidrMask)(m, 8 * ipResult.length);\n            }\n            this.network = (0,_ip_js__WEBPACK_IMPORTED_MODULE_2__.maskIp)(ipResult, this.mask);\n        }\n    }\n    /**\n     * Checks if netmask contains ip address\n     * @param ip\n     * @returns\n     */\n    contains(ip) {\n        return (0,_ip_js__WEBPACK_IMPORTED_MODULE_2__.containsIp)({ network: this.network, mask: this.mask }, ip);\n    }\n    /**Serializes back to string format */\n    toString() {\n        const l = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.simpleMaskLength)(this.mask);\n        const mask = l !== -1 ? String(l) : (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.maskToHex)(this.mask);\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.ipToString)(this.network) + \"/\" + mask;\n    }\n}\n//# sourceMappingURL=ipnet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2lwbmV0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ0Q7QUFDSDtBQUN1QjtBQUM3RDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5Q0FBeUMsRUFBRSxtREFBUztBQUNuRTtBQUNBO0FBQ0EsNkJBQTZCLCtEQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywrREFBTztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0RBQVE7QUFDcEM7QUFDQSwyQkFBMkIsOENBQU07QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0RBQVUsR0FBRyx3Q0FBd0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBEQUFnQjtBQUNsQyw0Q0FBNEMsbURBQVM7QUFDckQsZUFBZSxvREFBVTtBQUN6QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc3VtYW5fczJ2aW1ibVxcT25lRHJpdmVcXERlc2t0b3BcXE5GVC1OZXh1c1xcbmV3X2hhcmRoYXRcXG5vZGVfbW9kdWxlc1xcQGNoYWluc2FmZVxcbmV0bWFza1xcZGlzdFxcc3JjXFxpcG5ldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZUlQIH0gZnJvbSBcIkBjaGFpbnNhZmUvaXMtaXAvcGFyc2VcIjtcbmltcG9ydCB7IGNpZHJNYXNrLCBwYXJzZUNpZHIgfSBmcm9tIFwiLi9jaWRyLmpzXCI7XG5pbXBvcnQgeyBjb250YWluc0lwLCBtYXNrSXAgfSBmcm9tIFwiLi9pcC5qc1wiO1xuaW1wb3J0IHsgaXBUb1N0cmluZywgbWFza1RvSGV4LCBzaW1wbGVNYXNrTGVuZ3RoIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuZXhwb3J0IGNsYXNzIElwTmV0IHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpcE9yQ2lkciBlaXRoZXIgbmV0d29yayBpcCBvciBmdWxsIGNpZHIgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBtYXNrIGluIGNhc2UgaXBPckNpZHIgaXMgbmV0d29yayB0aGlzIGNhbiBiZSBlaXRoZXIgbWFzayBpbiBkZWNpbWFsIGZvcm1hdCBvciBhcyBpcCBhZGRyZXNzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaXBPckNpZHIsIG1hc2spIHtcbiAgICAgICAgaWYgKG1hc2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgKHsgbmV0d29yazogdGhpcy5uZXR3b3JrLCBtYXNrOiB0aGlzLm1hc2sgfSA9IHBhcnNlQ2lkcihpcE9yQ2lkcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaXBSZXN1bHQgPSBwYXJzZUlQKGlwT3JDaWRyKTtcbiAgICAgICAgICAgIGlmIChpcFJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIG5ldHdvcmtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXNrID0gU3RyaW5nKG1hc2spO1xuICAgICAgICAgICAgY29uc3QgbSA9IHBhcnNlSW50KG1hc2ssIDEwKTtcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4obSkgfHxcbiAgICAgICAgICAgICAgICBTdHJpbmcobSkubGVuZ3RoICE9PSBtYXNrLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgIG0gPCAwIHx8XG4gICAgICAgICAgICAgICAgbSA+IGlwUmVzdWx0Lmxlbmd0aCAqIDgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXNrUmVzdWx0ID0gcGFyc2VJUChtYXNrKTtcbiAgICAgICAgICAgICAgICBpZiAobWFza1Jlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBtYXNrXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1hc2sgPSBtYXNrUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXNrID0gY2lkck1hc2sobSwgOCAqIGlwUmVzdWx0Lmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm5ldHdvcmsgPSBtYXNrSXAoaXBSZXN1bHQsIHRoaXMubWFzayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIG5ldG1hc2sgY29udGFpbnMgaXAgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBpcFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgY29udGFpbnMoaXApIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zSXAoeyBuZXR3b3JrOiB0aGlzLm5ldHdvcmssIG1hc2s6IHRoaXMubWFzayB9LCBpcCk7XG4gICAgfVxuICAgIC8qKlNlcmlhbGl6ZXMgYmFjayB0byBzdHJpbmcgZm9ybWF0ICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGwgPSBzaW1wbGVNYXNrTGVuZ3RoKHRoaXMubWFzayk7XG4gICAgICAgIGNvbnN0IG1hc2sgPSBsICE9PSAtMSA/IFN0cmluZyhsKSA6IG1hc2tUb0hleCh0aGlzLm1hc2spO1xuICAgICAgICByZXR1cm4gaXBUb1N0cmluZyh0aGlzLm5ldHdvcmspICsgXCIvXCIgKyBtYXNrO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlwbmV0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/ipnet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js":
/*!**********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/util.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allFF: () => (/* binding */ allFF),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   ipToString: () => (/* binding */ ipToString),\n/* harmony export */   maskToHex: () => (/* binding */ maskToHex),\n/* harmony export */   simpleMaskLength: () => (/* binding */ simpleMaskLength)\n/* harmony export */ });\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n\nfunction allFF(a, from, to) {\n    let i = 0;\n    for (const e of a) {\n        if (i < from)\n            continue;\n        if (i > to)\n            break;\n        if (e !== 0xff)\n            return false;\n        i++;\n    }\n    return true;\n}\nfunction deepEqual(a, b, from, to) {\n    let i = 0;\n    for (const e of a) {\n        if (i < from)\n            continue;\n        if (i > to)\n            break;\n        if (e !== b[i])\n            return false;\n        i++;\n    }\n    return true;\n}\n/***\n * Returns long ip format\n */\nfunction ipToString(ip) {\n    switch (ip.length) {\n        case _ip_js__WEBPACK_IMPORTED_MODULE_0__.IPv4Len: {\n            return ip.join(\".\");\n        }\n        case _ip_js__WEBPACK_IMPORTED_MODULE_0__.IPv6Len: {\n            const result = [];\n            for (let i = 0; i < ip.length; i++) {\n                if (i % 2 === 0) {\n                    result.push(ip[i].toString(16).padStart(2, \"0\") +\n                        ip[i + 1].toString(16).padStart(2, \"0\"));\n                }\n            }\n            return result.join(\":\");\n        }\n        default: {\n            throw new Error(\"Invalid ip length\");\n        }\n    }\n}\n/**\n * If mask is a sequence of 1 bits followed by 0 bits, return number of 1 bits else -1\n */\nfunction simpleMaskLength(mask) {\n    let ones = 0;\n    // eslint-disable-next-line prefer-const\n    for (let [index, byte] of mask.entries()) {\n        if (byte === 0xff) {\n            ones += 8;\n            continue;\n        }\n        while ((byte & 0x80) != 0) {\n            ones++;\n            byte = byte << 1;\n        }\n        if ((byte & 0x80) != 0) {\n            return -1;\n        }\n        for (let i = index + 1; i < mask.length; i++) {\n            if (mask[i] != 0) {\n                return -1;\n            }\n        }\n        break;\n    }\n    return ones;\n}\nfunction maskToHex(mask) {\n    let hex = \"0x\";\n    for (const byte of mask) {\n        hex += (byte >> 4).toString(16) + (byte & 0x0f).toString(16);\n    }\n    return hex;\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTJDO0FBQ3BDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSwyQ0FBTztBQUNwQjtBQUNBO0FBQ0EsYUFBYSwyQ0FBTztBQUNwQjtBQUNBLDRCQUE0QixlQUFlO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxpQkFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc3VtYW5fczJ2aW1ibVxcT25lRHJpdmVcXERlc2t0b3BcXE5GVC1OZXh1c1xcbmV3X2hhcmRoYXRcXG5vZGVfbW9kdWxlc1xcQGNoYWluc2FmZVxcbmV0bWFza1xcZGlzdFxcc3JjXFx1dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElQdjRMZW4sIElQdjZMZW4gfSBmcm9tIFwiLi9pcC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGFsbEZGKGEsIGZyb20sIHRvKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgZSBvZiBhKSB7XG4gICAgICAgIGlmIChpIDwgZnJvbSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoaSA+IHRvKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChlICE9PSAweGZmKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiLCBmcm9tLCB0bykge1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGNvbnN0IGUgb2YgYSkge1xuICAgICAgICBpZiAoaSA8IGZyb20pXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGkgPiB0bylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBpZiAoZSAhPT0gYltpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKipcbiAqIFJldHVybnMgbG9uZyBpcCBmb3JtYXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlwVG9TdHJpbmcoaXApIHtcbiAgICBzd2l0Y2ggKGlwLmxlbmd0aCkge1xuICAgICAgICBjYXNlIElQdjRMZW46IHtcbiAgICAgICAgICAgIHJldHVybiBpcC5qb2luKFwiLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIElQdjZMZW46IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpcFtpXS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlwW2kgKyAxXS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oXCI6XCIpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaXAgbGVuZ3RoXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBJZiBtYXNrIGlzIGEgc2VxdWVuY2Ugb2YgMSBiaXRzIGZvbGxvd2VkIGJ5IDAgYml0cywgcmV0dXJuIG51bWJlciBvZiAxIGJpdHMgZWxzZSAtMVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlTWFza0xlbmd0aChtYXNrKSB7XG4gICAgbGV0IG9uZXMgPSAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBmb3IgKGxldCBbaW5kZXgsIGJ5dGVdIG9mIG1hc2suZW50cmllcygpKSB7XG4gICAgICAgIGlmIChieXRlID09PSAweGZmKSB7XG4gICAgICAgICAgICBvbmVzICs9IDg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoKGJ5dGUgJiAweDgwKSAhPSAwKSB7XG4gICAgICAgICAgICBvbmVzKys7XG4gICAgICAgICAgICBieXRlID0gYnl0ZSA8PCAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoYnl0ZSAmIDB4ODApICE9IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXggKyAxOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG1hc2tbaV0gIT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG9uZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFza1RvSGV4KG1hc2spIHtcbiAgICBsZXQgaGV4ID0gXCIweFwiO1xuICAgIGZvciAoY29uc3QgYnl0ZSBvZiBtYXNrKSB7XG4gICAgICAgIGhleCArPSAoYnl0ZSA+PiA0KS50b1N0cmluZygxNikgKyAoYnl0ZSAmIDB4MGYpLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\n");

/***/ })

};
;